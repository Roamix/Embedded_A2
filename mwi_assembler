//LOAD R0 0     			#(R0 = 0)
//LOAD R5 0       		#(R5 = 0)


1 ADDI R4 R0 31 			#(R4 = 31   = i + 31)
2 ADDI R7 R0 251			#(R7 = 251)

3 LOAD R1 000 (R3)      		#(R1 = xi)
4 LOAD R2 000 (R4)      		#(R2 = xi+31)
5 ADD R5 R5 R1    		#(R7 = R7 + xi)
6 SUB R5 R5 R2    		#(R7 = R7 - xi+31)
7 SR5 R6 R5       		#(Shift right 5 times, i.e. divide by 32. R6 = R5/32)
8 STORE 000 R6 (R7)   		#(Store average in memory location R7 (251...n). Store out of range of sample values)
9 ADDI R3 R0 1 			#(Add 1 to input memory index, i. i + 1)
a ADDI R4 R0 1  			#(Add 1 to input mempory index i+31. i+31 + 1)
b ADDI R7 R0 1			#(Add 1 to output memory index)
c BRANCH	       		#(Loop back to inst-memory address 6 --> LOAD R1 R3)

************
0 00000000...
1 100 100 000 31 			#(R4 = 31   = i + 31)
2 100 111 000 251			#(R7 = 251)

3 001 001 000 (011)      		#(R1 = xi)
4 001 010 000 (100)      		#(R2 = xi+31)
5 011 101 101 001    		#(R7 = R7 + xi)
6 101 101 101 010    		#(R7 = R7 - xi+31)
7 110 110 101       		#(Shift right 5 times, i.e. divide by 32. R6 = R5/32)
8 010 110 (111)  		#(Store average in memory location R7 (251...n). Store out of range of sample values)
9 100 011 000 001 			#(Add 1 to input memory index, i. i + 1)
a 100 100 000 001  			#(Add 1 to input mempory index i+31. i+31 + 1)
b 100 111 000 001			#(Add 1 to output memory index)
c 111        			#(Loop back to inst-memory address 6 --> LOAD R1 R3)



***OP CODE***
NOP   : 000
	storeenable = 0
	brsel = 0

LOAD  :	[001] [REG] [ADR]
	storeenable = 1
	*mem_rd = 1*
	datsel = 1

STORE :	[010] [ADR] [REG]
	storeenable = 0
	opsel = 3
	mem_wr = 1

ADD   :	[011] [REG] [REG] [REG]
	storeenable = 1
	addsel = 0
	opsel = 00

ADDI  :	[100] [REG] [REG] [CONST]
	storeenable = 1
	addsel = 1
	opsel = 00

SUB   :	[101] [REG] [REG] [REG]
	storeenable = 1
	addsel = 0
	opsel = 01
	

SR5   :	[110] [REG] [REG]
	storeenable = 1
	addsel = 0
	opsel = 10
	

BRANCH:	[111]
	brsel = 1
	storeenable = 0




############ NOTES #############
R0 always contains 0
R1 contains x_i.    The i'th input value
R2 contains x_i+31  The i+31th input value
R3 contains the read-input index value i
R4 contains the read-input index value i+31
R5 contains the sum of most 32 most recent input values.
R6 contains the average, R5 divided by 32 (shifted 5). That is the i'th output, mwi_i.

CPU needs the following instructions:
LOAD which places a value from memory into a register.
STORE which places a value from ALU into memory.
MOV which takes a value from a register and places into another register.
ADD which adds values from two registers together and places into a third register.
SUB which subtracts values from two register together and places into a third register.
ADDI which adds a constant to a register. Target register is equal to 0 + constant.
SR5 a shift right 5 times operation.
BRANCH which makes the execution pointer go to a specified memory address (instruction at the address).

We decided to take the average of the 32 most recent values rather than 30 most recent. With this we can just right-shift the value 5 times, which equals division by 32, rather than having to loop and subtract numerous times.


#mem0-31 = xi
